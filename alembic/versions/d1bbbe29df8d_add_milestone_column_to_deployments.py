"""add milestone column to deployments

Revision ID: d1bbbe29df8d
Revises: 1dbd992f774e
Create Date: 2025-07-31 14:39:12.525145

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd1bbbe29df8d'
down_revision: Union[str, Sequence[str], None] = '1dbd992f774e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # only add column if it doesn't already exist
    conn = op.get_bind()
    existing_cols = sa.inspect(conn).get_columns('deployments')
    col_names = [c['name'] for c in existing_cols]
    if 'milestone' not in col_names:
        op.add_column(
            'deployments',
            sa.Column('milestone', sa.String(), nullable=True)
        )
    op.add_column('versions', sa.Column('delta_maj', sa.Integer(), nullable=True))
    op.add_column('versions', sa.Column('delta_min', sa.Integer(), nullable=True))
    op.add_column('versions', sa.Column('delta_pat', sa.Integer(), nullable=True))
    op.add_column('versions', sa.Column('current', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('versions', 'current')
    op.drop_column('versions', 'delta_pat')
    op.drop_column('versions', 'delta_min')
    op.drop_column('versions', 'delta_maj')
    op.drop_constraint(None, 'deployments', type_='foreignkey')
    op.drop_column('deployments', 'milestone')
    # ### end Alembic commands ###
